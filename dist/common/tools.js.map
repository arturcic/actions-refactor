{"version":3,"file":"tools.js","sources":["../../src/tools/common/models.ts","../../src/tools/common/dotnet-tool.ts","../../src/tools/common/index.ts","../../src/agents/common/index.ts","../../src/tools/common/settings.ts"],"sourcesContent":["export enum SetupFields {\r\n    includePrerelease = 'includePrerelease',\r\n    versionSpec = 'versionSpec',\r\n    ignoreFailedSources = 'ignoreFailedSources',\r\n    preferLatestVersion = 'preferLatestVersion'\r\n}\r\n\r\nexport interface CliArgs {\r\n    command: string | undefined\r\n    buildAgent: string | undefined\r\n}\r\n\r\nexport interface SetupSettings {\r\n    [SetupFields.versionSpec]: string\r\n    [SetupFields.includePrerelease]: boolean\r\n    [SetupFields.ignoreFailedSources]: boolean\r\n    [SetupFields.preferLatestVersion]: boolean\r\n}\r\n\r\nexport interface ISettingsProvider {\r\n    getSetupSettings(): SetupSettings\r\n}\r\n","import { ISettingsProvider } from './models'\r\nimport os from 'node:os'\r\nimport fs from 'node:fs'\r\nimport path from 'node:path'\r\nimport crypto from 'node:crypto'\r\n\r\nimport * as semver from 'semver'\r\nimport { IBuildAgent, IExecResult } from '@agents/common'\r\n\r\nexport interface IDotnetTool {\r\n    get toolName(): string\r\n\r\n    disableTelemetry(): void\r\n\r\n    install(): Promise<string>\r\n}\r\n\r\ntype NugetVersions = { data: { versions: { version: string }[] }[] }\r\n\r\nexport abstract class DotnetTool implements IDotnetTool {\r\n    private static readonly nugetRoot: string = 'https://azuresearch-usnc.nuget.org/'\r\n\r\n    constructor(protected buildAgent: IBuildAgent) {}\r\n\r\n    abstract get settingsProvider(): ISettingsProvider\r\n\r\n    abstract get toolName(): string\r\n\r\n    disableTelemetry(): void {\r\n        this.buildAgent.info('Disable Telemetry')\r\n        this.buildAgent.setVariable('DOTNET_CLI_TELEMETRY_OPTOUT', 'true')\r\n        this.buildAgent.setVariable('DOTNET_NOLOGO', 'true')\r\n    }\r\n\r\n    async execute(cmd: string, args: string[]): Promise<IExecResult> {\r\n        this.buildAgent.info(`Command: ${cmd} ${args.join(' ')}`)\r\n        return this.buildAgent.exec(cmd, args)\r\n    }\r\n\r\n    async install(): Promise<string> {\r\n        const dotnetExePath = await this.buildAgent.which('dotnet', true)\r\n        this.buildAgent.debug(`whichPath: ${dotnetExePath}`)\r\n        await this.setDotnetRoot()\r\n\r\n        const setupSettings = this.settingsProvider.getSetupSettings()\r\n\r\n        let version: string | null = semver.clean(setupSettings.versionSpec) || setupSettings.versionSpec\r\n        this.buildAgent.info('--------------------------')\r\n        this.buildAgent.info(`Acquiring ${this.toolName} for version spec: ${version}`)\r\n        this.buildAgent.info('--------------------------')\r\n\r\n        if (!this.isExplicitVersion(version)) {\r\n            version = await this.queryLatestMatch(this.toolName, version, setupSettings.includePrerelease)\r\n            if (!version) {\r\n                throw new Error(`Unable to find ${this.toolName} version '${version}'.`)\r\n            }\r\n        }\r\n\r\n        let toolPath: string | null = null\r\n        if (!setupSettings.preferLatestVersion) {\r\n            // Let's try and resolve the version spec locally first\r\n            toolPath = this.buildAgent.findLocalTool(this.toolName, version)\r\n        }\r\n        if (!toolPath) {\r\n            // Download, extract, cache\r\n            toolPath = await this.installTool(this.toolName, version, setupSettings.ignoreFailedSources)\r\n            this.buildAgent.info('--------------------------')\r\n            this.buildAgent.info(`${this.toolName} version: ${version} installed.`)\r\n            this.buildAgent.info('--------------------------')\r\n        }\r\n\r\n        // Prepend the tool's path. This prepends the PATH for the current process and\r\n        // instructs the agent to prepend for each task that follows.\r\n        this.buildAgent.info(`Prepending ${toolPath} to PATH`)\r\n        this.buildAgent.debug(`toolPath: ${toolPath}`)\r\n\r\n        this.buildAgent.addPath(toolPath)\r\n\r\n        return toolPath\r\n    }\r\n\r\n    protected async setDotnetRoot(): Promise<void> {\r\n        if (os.platform() !== 'win32' && !this.buildAgent.getVariable('DOTNET_ROOT')) {\r\n            let dotnetPath = await this.buildAgent.which('dotnet', true)\r\n            dotnetPath = fs.readlinkSync(dotnetPath) || dotnetPath\r\n            const dotnetRoot = path.dirname(dotnetPath)\r\n            this.buildAgent.setVariable('DOTNET_ROOT', dotnetRoot)\r\n        }\r\n    }\r\n\r\n    protected isValidInputFile(input: string, file: string): boolean {\r\n        return this.filePathSupplied(input) && this.buildAgent.fileExists(file)\r\n    }\r\n\r\n    protected filePathSupplied(file: string): boolean {\r\n        const pathValue = path.resolve(this.buildAgent.getInput(file) || '')\r\n        const repoRoot = this.buildAgent.sourceDir\r\n        return pathValue !== repoRoot\r\n    }\r\n\r\n    private async queryLatestMatch(toolName: string, versionSpec: string, includePrerelease: boolean): Promise<string | null> {\r\n        this.buildAgent.info(\r\n            `Querying tool versions for ${toolName}${versionSpec ? `@${versionSpec}` : ''} ${includePrerelease ? 'including pre-releases' : ''}`\r\n        )\r\n\r\n        const toolNameParam = encodeURIComponent(toolName.toLowerCase())\r\n        const prereleaseParam = includePrerelease ? 'true' : 'false'\r\n        const downloadPath = `${DotnetTool.nugetRoot}query?q=${toolNameParam}&prerelease=${prereleaseParam}&semVerLevel=2.0.0&take=1`\r\n\r\n        const response = await fetch(downloadPath)\r\n\r\n        if (!response || !response.ok) {\r\n            this.buildAgent.warn(`failed to query latest version for ${toolName} from ${downloadPath}. Status code: ${response ? response.status : 'unknown'}`)\r\n            return null\r\n        }\r\n\r\n        const { data }: NugetVersions = (await response.json()) as NugetVersions\r\n\r\n        const versions = data[0].versions.map(x => x.version)\r\n        if (!versions || !versions.length) {\r\n            return null\r\n        }\r\n\r\n        this.buildAgent.debug(`got versions: ${versions.join(', ')}`)\r\n\r\n        const version = semver.maxSatisfying(versions, versionSpec, { includePrerelease })\r\n        if (version) {\r\n            this.buildAgent.info(`Found matching version: ${version}`)\r\n        } else {\r\n            this.buildAgent.info('match not found')\r\n        }\r\n\r\n        return version\r\n    }\r\n\r\n    private async installTool(toolName: string, version: string, ignoreFailedSources: boolean): Promise<string> {\r\n        const semverVersion = semver.clean(version)\r\n        if (!semverVersion) {\r\n            throw new Error(`Invalid version spec: ${version}`)\r\n        }\r\n\r\n        const tempDirectory = await this.createTempDir()\r\n\r\n        if (!tempDirectory) {\r\n            throw new Error('Unable to create temp directory')\r\n        }\r\n\r\n        const args = ['tool', 'install', toolName, '--tool-path', tempDirectory, '--version', semverVersion]\r\n        if (ignoreFailedSources) {\r\n            args.push('--ignore-failed-sources')\r\n        }\r\n\r\n        const result = await this.execute('dotnet', args)\r\n        const status = result.code === 0 ? 'success' : 'failure'\r\n        const message = result.code === 0 ? result.stdout : result.stderr\r\n\r\n        this.buildAgent.debug(`Tool install result: ${status} ${message}`)\r\n        if (result.code !== 0) {\r\n            throw new Error(message)\r\n        }\r\n        this.buildAgent.info(message)\r\n\r\n        return await this.buildAgent.cacheToolDir(tempDirectory, toolName, semverVersion)\r\n    }\r\n\r\n    async createTempDir(): Promise<string> {\r\n        const tempRootDir = this.buildAgent.tempDir\r\n        if (!tempRootDir) {\r\n            throw new Error('Temp directory not set')\r\n        }\r\n\r\n        const uuid = crypto.randomUUID()\r\n        const tempPath = path.join(tempRootDir, uuid)\r\n        this.buildAgent.debug(`Creating temp directory ${tempPath}`)\r\n        fs.mkdirSync(tempPath, { recursive: true })\r\n        return Promise.resolve(tempPath)\r\n    }\r\n\r\n    private isExplicitVersion(versionSpec: string): boolean {\r\n        const cleanedVersionSpec = semver.clean(versionSpec)\r\n        const valid = semver.valid(cleanedVersionSpec) != null\r\n        this.buildAgent.debug(`Is version explicit? ${valid}`)\r\n\r\n        return valid\r\n    }\r\n}\r\n","import { parseArgs } from 'util'\r\nimport { CliArgs } from './models'\r\n\r\nexport * from './models'\r\nexport * from './dotnet-tool'\r\n\r\n//import { randomUUID } from 'node:crypto';\r\n//import * as semver from 'semver';\r\n\r\nexport function parseCliArgs(): CliArgs {\r\n    return parseArgs({\r\n        options: {\r\n            command: { type: 'string', short: 'c' },\r\n            buildAgent: { type: 'string', short: 'a' }\r\n        }\r\n    }).values as CliArgs\r\n}\r\n","/// <reference types=\"vite/client\" />\r\n\r\nimport os from 'node:os'\r\nimport path from 'node:path'\r\nimport fs from 'node:fs'\r\nimport process from 'node:process'\r\nimport * as semver from 'semver'\r\n\r\nexport interface IBuildAgent {\r\n    agentName: string\r\n    sourceDir: string\r\n    tempDir: string\r\n    cacheDir: string\r\n\r\n    addPath(inputPath: string): void\r\n\r\n    debug(message: string): void\r\n\r\n    info(message: string): void\r\n\r\n    warn(message: string): void\r\n\r\n    error(message: string): void\r\n\r\n    exec(exec: string, args: string[]): Promise<IExecResult>\r\n\r\n    cacheToolDir(sourceDir: string, tool: string, version: string, arch?: string): Promise<string>\r\n\r\n    dirExists(file: string): boolean\r\n\r\n    fileExists(file: string): boolean\r\n\r\n    findLocalTool(toolName: string, versionSpec: string, arch?: string): string | null\r\n\r\n    getInput(input: string, required?: boolean): string\r\n\r\n    getBooleanInput(input: string, required?: boolean): boolean\r\n\r\n    getListInput(input: string, required?: boolean): string[]\r\n\r\n    setFailed(message: string, done?: boolean): void\r\n\r\n    setOutput(name: string, value: string): void\r\n\r\n    setSucceeded(message: string, done?: boolean): void\r\n\r\n    getVariable(name: string): string | undefined\r\n\r\n    getVariableAsPath(name: string): string\r\n\r\n    setVariable(name: string, value: string): void\r\n\r\n    which(tool: string, check?: boolean): Promise<string>\r\n}\r\n\r\nexport abstract class BuildAgentBase implements IBuildAgent {\r\n    abstract agentName: string\r\n    abstract sourceDir: string\r\n    abstract tempDir: string\r\n    abstract cacheDir: string\r\n\r\n    abstract addPath(inputPath: string): void\r\n\r\n    abstract debug(message: string): void\r\n\r\n    abstract info(message: string): void\r\n\r\n    abstract warn(message: string): void\r\n\r\n    abstract error(message: string): void\r\n\r\n    abstract exec(exec: string, args: string[]): Promise<IExecResult>\r\n\r\n    abstract setFailed(message: string, done?: boolean | undefined): void\r\n\r\n    abstract setOutput(name: string, value: string): void\r\n\r\n    abstract setSucceeded(message: string, done?: boolean | undefined): void\r\n\r\n    abstract setVariable(name: string, value: string): void\r\n\r\n    abstract which(tool: string, check?: boolean | undefined): Promise<string>\r\n\r\n    getInput(input: string, required?: boolean): string {\r\n        input = input.replace(/ /g, '_').toUpperCase()\r\n        const val = this.getVariable(`INPUT_${input}`)\r\n        if (required && !val) {\r\n            throw new Error(`Input required and not supplied: ${input}`)\r\n        }\r\n        return val.trim()\r\n    }\r\n\r\n    getBooleanInput(input: string, required?: boolean): boolean {\r\n        const inputValue = this.getInput(input, required)\r\n        return (inputValue || 'false').toLowerCase() === 'true'\r\n    }\r\n\r\n    getListInput(input: string, required?: boolean): string[] {\r\n        return this.getInput(input, required)\r\n            .split('\\n')\r\n            .filter(x => x !== '')\r\n    }\r\n\r\n    getVariable(name: string): string {\r\n        this.debug(`getVariable - ${name}`)\r\n        const val = process.env[name] || ''\r\n        return val.trim()\r\n    }\r\n\r\n    getVariableAsPath(name: string): string {\r\n        return path.resolve(path.normalize(this.getVariable(name)))\r\n    }\r\n\r\n    dirExists(file: string): boolean {\r\n        return fs.existsSync(file) && fs.statSync(file).isDirectory()\r\n    }\r\n\r\n    fileExists(file: string): boolean {\r\n        return fs.existsSync(file) && fs.statSync(file).isFile()\r\n    }\r\n\r\n    async cacheToolDir(sourceDir: string, tool: string, version: string, arch?: string): Promise<string> {\r\n        arch = arch || os.arch()\r\n        if (!tool) {\r\n            throw new Error('tool is a required parameter')\r\n        }\r\n        if (!version) {\r\n            throw new Error('version is a required parameter')\r\n        }\r\n        if (!sourceDir) {\r\n            throw new Error('sourceDir is a required parameter')\r\n        }\r\n\r\n        const cacheRoot = this.cacheDir\r\n        if (!cacheRoot) {\r\n            this.debug('cache root not set')\r\n            return Promise.resolve('')\r\n        }\r\n\r\n        version = semver.clean(version) || version\r\n        const destPath = path.join(cacheRoot, tool, version, arch)\r\n        if (this.dirExists(destPath)) {\r\n            this.debug(`Destination directory ${destPath} already exists, removing`)\r\n            fs.rmSync(destPath, { recursive: true, force: true, maxRetries: 3, retryDelay: 1000 })\r\n        }\r\n\r\n        this.debug(`Copying ${sourceDir} to ${destPath}`)\r\n        fs.mkdirSync(destPath, { recursive: true })\r\n        fs.cpSync(sourceDir, destPath, { recursive: true, force: true })\r\n\r\n        this.debug(`Caching ${tool}@${version} (${arch}) from ${sourceDir}`)\r\n        return Promise.resolve(destPath)\r\n    }\r\n\r\n    findLocalTool(toolName: string, versionSpec: string, arch?: string): string | null {\r\n        arch = arch || os.arch()\r\n        if (!toolName) {\r\n            throw new Error('toolName is a required parameter')\r\n        }\r\n        if (!versionSpec) {\r\n            throw new Error('versionSpec is a required parameter')\r\n        }\r\n\r\n        const cacheRoot = this.cacheDir\r\n        if (!cacheRoot) {\r\n            this.debug('cache root not set')\r\n            return null\r\n        }\r\n\r\n        versionSpec = semver.clean(versionSpec) || versionSpec\r\n        this.info(`Looking for local tool ${toolName}@${versionSpec} (${arch})`)\r\n        const toolPath = path.join(cacheRoot, toolName, versionSpec, arch)\r\n        if (!this.dirExists(toolPath)) {\r\n            this.info(`Directory ${toolPath} not found`)\r\n            return null\r\n        } else {\r\n            this.info(`Found tool ${toolName}@${versionSpec} (${arch})`)\r\n        }\r\n\r\n        return toolPath\r\n    }\r\n}\r\n\r\nexport interface IExecResult {\r\n    stdout: string\r\n    stderr: string\r\n    code: number\r\n    error?: Error | null\r\n}\r\n\r\nexport async function getAgent(buildAgent: string | undefined): Promise<IBuildAgent> {\r\n    const agent = `../agents/${buildAgent}/buildAgent.js`\r\n    const module: { BuildAgent: new () => IBuildAgent } = await import(agent)\r\n    return new module.BuildAgent()\r\n}\r\n","import { ISettingsProvider, SetupSettings, SetupFields } from './models'\r\nimport { IBuildAgent } from '@agents/common'\r\n\r\nexport class SettingsProvider implements ISettingsProvider {\r\n    constructor(protected buildAgent: IBuildAgent) {}\r\n\r\n    getSetupSettings(): SetupSettings {\r\n        const versionSpec = this.buildAgent.getInput(SetupFields.versionSpec)\r\n        const includePrerelease = this.buildAgent.getBooleanInput(SetupFields.includePrerelease)\r\n        const ignoreFailedSources = this.buildAgent.getBooleanInput(SetupFields.ignoreFailedSources)\r\n        const preferLatestVersion = this.buildAgent.getBooleanInput(SetupFields.preferLatestVersion)\r\n\r\n        return {\r\n            versionSpec,\r\n            includePrerelease,\r\n            ignoreFailedSources,\r\n            preferLatestVersion\r\n        }\r\n    }\r\n}\r\n"],"names":["SetupFields","semver.clean","semver.maxSatisfying","semver.valid"],"mappings":"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"}