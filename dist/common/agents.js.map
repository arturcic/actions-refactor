{"version":3,"file":"agents.js","sources":["../../src/agents/common/index.ts"],"sourcesContent":["/// <reference types=\"vite/client\" />\r\n\r\nimport os from 'node:os'\r\nimport * as semver from 'semver'\r\nimport path from 'node:path'\r\nimport fs from 'node:fs'\r\nimport process from 'node:process'\r\n\r\nexport interface IBuildAgent {\r\n    agentName: string\r\n\r\n    addPath(inputPath: string): void\r\n\r\n    debug(message: string): void\r\n\r\n    info(message: string): void\r\n\r\n    warn(message: string): void\r\n\r\n    error(message: string): void\r\n\r\n    exec(exec: string, args: string[]): Promise<IExecResult>\r\n\r\n    cacheDir(sourceDir: string, tool: string, version: string, arch?: string): Promise<string>\r\n\r\n    dirExists(file: string): boolean\r\n\r\n    fileExists(file: string): boolean\r\n\r\n    findLocalTool(toolName: string, versionSpec: string, arch?: string): string | null\r\n\r\n    getSourceDir(): string | undefined\r\n\r\n    getTempRootDir(): string | undefined\r\n\r\n    getCacheRootDir(): string | undefined\r\n\r\n    getInput(input: string, required?: boolean): string\r\n\r\n    getBooleanInput(input: string, required?: boolean): boolean\r\n\r\n    getListInput(input: string, required?: boolean): string[]\r\n\r\n    setFailed(message: string, done?: boolean): void\r\n\r\n    setOutput(name: string, value: string): void\r\n\r\n    setSucceeded(message: string, done?: boolean): void\r\n\r\n    getVariable(name: string): string | undefined\r\n\r\n    setVariable(name: string, value: string): void\r\n\r\n    which(tool: string, check?: boolean): Promise<string>\r\n}\r\n\r\nexport abstract class BuildAgentBase implements IBuildAgent {\r\n    abstract agentName: string\r\n\r\n    abstract addPath(inputPath: string): void\r\n\r\n    abstract debug(message: string): void\r\n\r\n    abstract info(message: string): void\r\n\r\n    abstract warn(message: string): void\r\n\r\n    abstract error(message: string): void\r\n\r\n    abstract exec(exec: string, args: string[]): Promise<IExecResult>\r\n\r\n    abstract getSourceDir(): string | undefined\r\n\r\n    abstract getTempRootDir(): string | undefined\r\n\r\n    abstract getCacheRootDir(): string | undefined\r\n\r\n    abstract setFailed(message: string, done?: boolean | undefined): void\r\n\r\n    abstract setOutput(name: string, value: string): void\r\n\r\n    abstract setSucceeded(message: string, done?: boolean | undefined): void\r\n\r\n    abstract setVariable(name: string, value: string): void\r\n\r\n    abstract which(tool: string, check?: boolean | undefined): Promise<string>\r\n\r\n    getInput(input: string, required?: boolean): string {\r\n        input = input.replace(/ /g, '_').toUpperCase()\r\n        const val = this.getVariable(`INPUT_${input}`)\r\n        if (required && !val) {\r\n            throw new Error(`Input required and not supplied: ${input}`)\r\n        }\r\n        return val.trim()\r\n    }\r\n\r\n    getBooleanInput(input: string, required?: boolean): boolean {\r\n        const inputValue = this.getInput(input, required)\r\n        return (inputValue || 'false').toLowerCase() === 'true'\r\n    }\r\n\r\n    getListInput(input: string, required?: boolean): string[] {\r\n        return this.getInput(input, required)\r\n            .split('\\n')\r\n            .filter(x => x !== '')\r\n    }\r\n\r\n    getVariable(name: string): string {\r\n        this.debug(`getVariable - ${name}`)\r\n        const val = process.env[name] || ''\r\n        return path.normalize(val.trim())\r\n    }\r\n\r\n    dirExists(file: string): boolean {\r\n        return fs.existsSync(file) && fs.statSync(file).isDirectory()\r\n    }\r\n\r\n    fileExists(file: string): boolean {\r\n        return fs.existsSync(file) && fs.statSync(file).isFile()\r\n    }\r\n\r\n    async cacheDir(sourceDir: string, tool: string, version: string, arch?: string): Promise<string> {\r\n        arch = arch || os.arch()\r\n        if (!tool) {\r\n            throw new Error('tool is a required parameter')\r\n        }\r\n        if (!version) {\r\n            throw new Error('version is a required parameter')\r\n        }\r\n        if (!sourceDir) {\r\n            throw new Error('sourceDir is a required parameter')\r\n        }\r\n\r\n        const cacheRoot = this.getCacheRootDir()\r\n        if (!cacheRoot) {\r\n            this.debug('cache root not set')\r\n            return Promise.resolve('')\r\n        }\r\n\r\n        version = semver.clean(version) || version\r\n        const destPath = path.join(cacheRoot, tool, version, arch)\r\n        if (this.dirExists(destPath)) {\r\n            this.debug(`Destination directory ${destPath} already exists, removing`)\r\n            fs.rmSync(destPath, { recursive: true, force: true, maxRetries: 3, retryDelay: 1000 })\r\n        }\r\n\r\n        this.debug(`Copying ${sourceDir} to ${destPath}`)\r\n        fs.mkdirSync(destPath, { recursive: true })\r\n        fs.cpSync(sourceDir, destPath, { recursive: true, force: true })\r\n\r\n        this.debug(`Caching ${tool}@${version} (${arch}) from ${sourceDir}`)\r\n        return Promise.resolve(destPath)\r\n    }\r\n\r\n    findLocalTool(toolName: string, versionSpec: string, arch?: string): string | null {\r\n        arch = arch || os.arch()\r\n        if (!toolName) {\r\n            throw new Error('toolName is a required parameter')\r\n        }\r\n        if (!versionSpec) {\r\n            throw new Error('versionSpec is a required parameter')\r\n        }\r\n\r\n        const cacheRoot = this.getCacheRootDir()\r\n        if (!cacheRoot) {\r\n            this.debug('cache root not set')\r\n            return null\r\n        }\r\n\r\n        versionSpec = semver.clean(versionSpec) || versionSpec\r\n        this.info(`Looking for local tool ${toolName}@${versionSpec} (${arch})`)\r\n        const toolPath = path.join(cacheRoot, toolName, versionSpec, arch)\r\n        if (!this.dirExists(toolPath)) {\r\n            this.info(`Directory ${toolPath} not found`)\r\n            return null\r\n        } else {\r\n            this.info(`Found tool ${toolName}@${versionSpec} (${arch})`)\r\n        }\r\n\r\n        return toolPath\r\n    }\r\n}\r\n\r\nexport interface IExecResult {\r\n    stdout: string\r\n    stderr: string\r\n    code: number\r\n    error?: Error | null\r\n}\r\n\r\nexport async function getAgent(buildAgent: string | undefined): Promise<IBuildAgent> {\r\n    const agent = `../agents/${buildAgent}/agent.js`\r\n    const module: { BuildAgent: new () => IBuildAgent } = await import(agent)\r\n    return new module.BuildAgent()\r\n}\r\n"],"names":[],"mappings":";;;;;;AA8LA,eAAsB,SAAS,UAAsD,EAAA;AACjF,EAAM,MAAA,KAAA,GAAQ,aAAa,UAAU,CAAA,SAAA,CAAA,CAAA;AACrC,EAAM,MAAA,MAAA,GAAgD,MAAM,OAAO,KAAA,CAAA,CAAA;AACnE,EAAO,OAAA,IAAI,OAAO,UAAW,EAAA,CAAA;AACjC;;;;"}