{"version":3,"file":"agents.js","sources":["../../src/agents/common/build-agent.ts"],"sourcesContent":["import process from 'node:process'\r\nimport path from 'node:path'\r\nimport fs from 'node:fs'\r\nimport os from 'node:os'\r\nimport * as semver from 'semver'\r\nimport { IExecResult } from './models'\r\n\r\nexport interface IBuildAgent {\r\n    agentName: string\r\n    sourceDir: string\r\n    tempDir: string\r\n    cacheDir: string\r\n\r\n    addPath(inputPath: string): void\r\n\r\n    debug(message: string): void\r\n\r\n    info(message: string): void\r\n\r\n    warn(message: string): void\r\n\r\n    error(message: string): void\r\n\r\n    exec(exec: string, args: string[]): Promise<IExecResult>\r\n\r\n    cacheToolDir(sourceDir: string, tool: string, version: string, arch?: string): Promise<string>\r\n\r\n    dirExists(file: string): boolean\r\n\r\n    fileExists(file: string): boolean\r\n\r\n    findLocalTool(toolName: string, versionSpec: string, arch?: string): string | null\r\n\r\n    getInput(input: string, required?: boolean): string\r\n\r\n    getBooleanInput(input: string, required?: boolean): boolean\r\n\r\n    getListInput(input: string, required?: boolean): string[]\r\n\r\n    setFailed(message: string, done?: boolean): void\r\n\r\n    setOutput(name: string, value: string): void\r\n\r\n    setSucceeded(message: string, done?: boolean): void\r\n\r\n    getVariable(name: string): string | undefined\r\n\r\n    getVariableAsPath(name: string): string\r\n\r\n    setVariable(name: string, value: string): void\r\n\r\n    which(tool: string, check?: boolean): Promise<string>\r\n}\r\n\r\nexport abstract class BuildAgentBase implements IBuildAgent {\r\n    abstract agentName: string\r\n    abstract sourceDir: string\r\n    abstract tempDir: string\r\n    abstract cacheDir: string\r\n\r\n    abstract addPath(inputPath: string): void\r\n\r\n    abstract debug(message: string): void\r\n\r\n    abstract info(message: string): void\r\n\r\n    abstract warn(message: string): void\r\n\r\n    abstract error(message: string): void\r\n\r\n    abstract exec(exec: string, args: string[]): Promise<IExecResult>\r\n\r\n    abstract setFailed(message: string, done?: boolean | undefined): void\r\n\r\n    abstract setOutput(name: string, value: string): void\r\n\r\n    abstract setSucceeded(message: string, done?: boolean | undefined): void\r\n\r\n    abstract setVariable(name: string, value: string): void\r\n\r\n    abstract which(tool: string, check?: boolean | undefined): Promise<string>\r\n\r\n    getInput(input: string, required?: boolean): string {\r\n        input = input.replace(/ /g, '_').toUpperCase()\r\n        const val = this.getVariable(`INPUT_${input}`)\r\n        if (required && !val) {\r\n            throw new Error(`Input required and not supplied: ${input}`)\r\n        }\r\n        return val.trim()\r\n    }\r\n\r\n    getBooleanInput(input: string, required?: boolean): boolean {\r\n        const inputValue = this.getInput(input, required)\r\n        return (inputValue || 'false').toLowerCase() === 'true'\r\n    }\r\n\r\n    getListInput(input: string, required?: boolean): string[] {\r\n        return this.getInput(input, required)\r\n            .split('\\n')\r\n            .filter(x => x !== '')\r\n    }\r\n\r\n    getVariable(name: string): string {\r\n        this.debug(`getVariable - ${name}`)\r\n        const val = process.env[name] || ''\r\n        return val.trim()\r\n    }\r\n\r\n    getVariableAsPath(name: string): string {\r\n        return path.resolve(path.normalize(this.getVariable(name)))\r\n    }\r\n\r\n    dirExists(file: string): boolean {\r\n        return fs.existsSync(file) && fs.statSync(file).isDirectory()\r\n    }\r\n\r\n    fileExists(file: string): boolean {\r\n        return fs.existsSync(file) && fs.statSync(file).isFile()\r\n    }\r\n\r\n    async cacheToolDir(sourceDir: string, tool: string, version: string, arch?: string): Promise<string> {\r\n        arch = arch || os.arch()\r\n        if (!tool) {\r\n            throw new Error('tool is a required parameter')\r\n        }\r\n        if (!version) {\r\n            throw new Error('version is a required parameter')\r\n        }\r\n        if (!sourceDir) {\r\n            throw new Error('sourceDir is a required parameter')\r\n        }\r\n\r\n        const cacheRoot = this.cacheDir\r\n        if (!cacheRoot) {\r\n            this.debug('cache root not set')\r\n            return Promise.resolve('')\r\n        }\r\n\r\n        version = semver.clean(version) || version\r\n        const destPath = path.join(cacheRoot, tool, version, arch)\r\n        if (this.dirExists(destPath)) {\r\n            this.debug(`Destination directory ${destPath} already exists, removing`)\r\n            fs.rmSync(destPath, { recursive: true, force: true, maxRetries: 3, retryDelay: 1000 })\r\n        }\r\n\r\n        this.debug(`Copying ${sourceDir} to ${destPath}`)\r\n        fs.mkdirSync(destPath, { recursive: true })\r\n        fs.cpSync(sourceDir, destPath, { recursive: true, force: true })\r\n\r\n        this.debug(`Caching ${tool}@${version} (${arch}) from ${sourceDir}`)\r\n        return Promise.resolve(destPath)\r\n    }\r\n\r\n    findLocalTool(toolName: string, versionSpec: string, arch?: string): string | null {\r\n        arch = arch || os.arch()\r\n        if (!toolName) {\r\n            throw new Error('toolName is a required parameter')\r\n        }\r\n        if (!versionSpec) {\r\n            throw new Error('versionSpec is a required parameter')\r\n        }\r\n\r\n        const cacheRoot = this.cacheDir\r\n        if (!cacheRoot) {\r\n            this.debug('cache root not set')\r\n            return null\r\n        }\r\n\r\n        versionSpec = semver.clean(versionSpec) || versionSpec\r\n        this.info(`Looking for local tool ${toolName}@${versionSpec} (${arch})`)\r\n        const toolPath = path.join(cacheRoot, toolName, versionSpec, arch)\r\n        if (!this.dirExists(toolPath)) {\r\n            this.info(`Directory ${toolPath} not found`)\r\n            return null\r\n        } else {\r\n            this.info(`Found tool ${toolName}@${versionSpec} (${arch})`)\r\n        }\r\n\r\n        return toolPath\r\n    }\r\n}\r\n"],"names":["semver.clean"],"mappings":"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"}