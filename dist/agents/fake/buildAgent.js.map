{"version":3,"file":"buildAgent.js","sources":["../../../src/agents/fake/internal/lookPath.ts","../../../src/agents/common/index.ts","../../../src/agents/fake/buildAgent.ts"],"sourcesContent":["import * as fs from 'node:fs'\r\nimport * as path from 'node:path'\r\nimport * as process from 'node:process'\r\n\r\n/**\r\n * Sometimes, people want to look for local executable files\r\n * which are specified with either relative or absolute file path.\r\n * @private\r\n * @param cmd\r\n * @return {string} An absolute path of given command, or undefined.\r\n */\r\nconst isFilePath = (cmd: string): string | undefined => {\r\n    return cmd.includes(path.sep) ? path.resolve(cmd) : undefined\r\n}\r\n\r\n/**\r\n * Just promisifies \"fs.access\"\r\n * @private\r\n * @param {string} filePath An absolute file path with an applicable extension appended.\r\n * @return {Promise<string>} Resolves absolute path or empty string.\r\n */\r\nconst access = async (filePath: string): Promise<string | undefined> => {\r\n    return new Promise(resolve => fs.access(filePath, fs.constants.X_OK, err => resolve(err ? undefined : filePath)))\r\n}\r\n\r\n/**\r\n * Resolves if the given file is executable or not, regarding \"PATHEXT\" to be applied.\r\n * @private\r\n * @param {string} absPath A file path to be checked.\r\n * @param {LookPathOption} options Options for lookPath.\r\n * @return {Promise<string>} Resolves the absolute file path just checked, or undefined.\r\n */\r\nconst isExecutable = async (absPath: string, options: LookPathOption = {}): Promise<string | undefined> => {\r\n    const envVars = options.env || process.env\r\n    const extension = (envVars.PATHEXT || '').split(path.delimiter).concat('')\r\n    const bins = await Promise.all(extension.map(async ext => access(absPath + ext)))\r\n    return bins.find(bin => !!bin)\r\n}\r\n\r\n/**\r\n * Returns a list of directories on which the target command should be looked for.\r\n * @private\r\n * @param {string[]} options.include Will be added to \"PATH\" env.\r\n * @param {string[]} options.exclude Will be filtered from \"PATH\" env.\r\n * @return {string[]} Directories to dig into.\r\n */\r\nconst getDirsToWalkThrough = (options: LookPathOption): string[] => {\r\n    const envVars = options.env || process.env\r\n    const envName = process.platform === 'win32' ? 'Path' : 'PATH'\r\n    const envPath = envVars[envName] || ''\r\n    return envPath\r\n        .split(path.delimiter)\r\n        .concat(options.include || [])\r\n        .filter(p => !(options.exclude || []).includes(p))\r\n}\r\n\r\n/**\r\n * Returns async promise with absolute file path of given command,\r\n * and resolves with undefined if the command not found.\r\n * @param {string} command Command name to look for.\r\n * @param {LookPathOption} opt Options for lookPath.\r\n * @return {Promise<string|undefined>} Resolves absolute file path, or undefined if not found.\r\n */\r\nexport async function lookPath(command: string, opt: LookPathOption = {}): Promise<string | undefined> {\r\n    const directPath = isFilePath(command)\r\n    if (directPath) return isExecutable(directPath, opt)\r\n\r\n    const dirs = getDirsToWalkThrough(opt)\r\n    const bins = await Promise.all(dirs.map(async dir => isExecutable(path.join(dir, command), opt)))\r\n    return bins.find(bin => !!bin)\r\n}\r\n\r\n/**\r\n * Options for lookPath.\r\n */\r\nexport interface LookPathOption {\r\n    /**\r\n     * Additional paths to look for, would be dealt same as PATH env.\r\n     * Example: ['/tmp/bin', 'usr/local/bin']\r\n     */\r\n    include?: string[]\r\n    /**\r\n     * Paths to exclude to look for.\r\n     * Example: ['/mnt']\r\n     */\r\n    exclude?: string[]\r\n    /**\r\n     * Set of env var to be used ON BEHALF OF the existing env of your runtime.\r\n     * If `include` or `exclude` are given, they will be applied to this env set.\r\n     */\r\n    env?: NodeJS.ProcessEnv\r\n}\r\n","/// <reference types=\"vite/client\" />\r\n\r\nimport os from 'node:os'\r\nimport * as semver from 'semver'\r\nimport path from 'node:path'\r\nimport fs from 'node:fs'\r\nimport process from 'node:process'\r\n\r\nexport interface IBuildAgent {\r\n    agentName: string\r\n    sourceDir: string\r\n    tempDir: string\r\n    cacheDir: string\r\n\r\n    addPath(inputPath: string): void\r\n\r\n    debug(message: string): void\r\n\r\n    info(message: string): void\r\n\r\n    warn(message: string): void\r\n\r\n    error(message: string): void\r\n\r\n    exec(exec: string, args: string[]): Promise<IExecResult>\r\n\r\n    cacheToolDir(sourceDir: string, tool: string, version: string, arch?: string): Promise<string>\r\n\r\n    dirExists(file: string): boolean\r\n\r\n    fileExists(file: string): boolean\r\n\r\n    findLocalTool(toolName: string, versionSpec: string, arch?: string): string | null\r\n\r\n    getInput(input: string, required?: boolean): string\r\n\r\n    getBooleanInput(input: string, required?: boolean): boolean\r\n\r\n    getListInput(input: string, required?: boolean): string[]\r\n\r\n    setFailed(message: string, done?: boolean): void\r\n\r\n    setOutput(name: string, value: string): void\r\n\r\n    setSucceeded(message: string, done?: boolean): void\r\n\r\n    getVariable(name: string): string | undefined\r\n\r\n    getVariableAsPath(name: string): string\r\n\r\n    setVariable(name: string, value: string): void\r\n\r\n    which(tool: string, check?: boolean): Promise<string>\r\n}\r\n\r\nexport abstract class BuildAgentBase implements IBuildAgent {\r\n    abstract agentName: string\r\n    abstract sourceDir: string\r\n    abstract tempDir: string\r\n    abstract cacheDir: string\r\n\r\n    abstract addPath(inputPath: string): void\r\n\r\n    abstract debug(message: string): void\r\n\r\n    abstract info(message: string): void\r\n\r\n    abstract warn(message: string): void\r\n\r\n    abstract error(message: string): void\r\n\r\n    abstract exec(exec: string, args: string[]): Promise<IExecResult>\r\n\r\n    abstract setFailed(message: string, done?: boolean | undefined): void\r\n\r\n    abstract setOutput(name: string, value: string): void\r\n\r\n    abstract setSucceeded(message: string, done?: boolean | undefined): void\r\n\r\n    abstract setVariable(name: string, value: string): void\r\n\r\n    abstract which(tool: string, check?: boolean | undefined): Promise<string>\r\n\r\n    getInput(input: string, required?: boolean): string {\r\n        input = input.replace(/ /g, '_').toUpperCase()\r\n        const val = this.getVariable(`INPUT_${input}`)\r\n        if (required && !val) {\r\n            throw new Error(`Input required and not supplied: ${input}`)\r\n        }\r\n        return val.trim()\r\n    }\r\n\r\n    getBooleanInput(input: string, required?: boolean): boolean {\r\n        const inputValue = this.getInput(input, required)\r\n        return (inputValue || 'false').toLowerCase() === 'true'\r\n    }\r\n\r\n    getListInput(input: string, required?: boolean): string[] {\r\n        return this.getInput(input, required)\r\n            .split('\\n')\r\n            .filter(x => x !== '')\r\n    }\r\n\r\n    getVariable(name: string): string {\r\n        this.debug(`getVariable - ${name}`)\r\n        const val = process.env[name] || ''\r\n        return val.trim()\r\n    }\r\n\r\n    getVariableAsPath(name: string): string {\r\n        return path.resolve(path.normalize(this.getVariable(name)))\r\n    }\r\n\r\n    dirExists(file: string): boolean {\r\n        return fs.existsSync(file) && fs.statSync(file).isDirectory()\r\n    }\r\n\r\n    fileExists(file: string): boolean {\r\n        return fs.existsSync(file) && fs.statSync(file).isFile()\r\n    }\r\n\r\n    async cacheToolDir(sourceDir: string, tool: string, version: string, arch?: string): Promise<string> {\r\n        arch = arch || os.arch()\r\n        if (!tool) {\r\n            throw new Error('tool is a required parameter')\r\n        }\r\n        if (!version) {\r\n            throw new Error('version is a required parameter')\r\n        }\r\n        if (!sourceDir) {\r\n            throw new Error('sourceDir is a required parameter')\r\n        }\r\n\r\n        const cacheRoot = this.cacheDir\r\n        if (!cacheRoot) {\r\n            this.debug('cache root not set')\r\n            return Promise.resolve('')\r\n        }\r\n\r\n        version = semver.clean(version) || version\r\n        const destPath = path.join(cacheRoot, tool, version, arch)\r\n        if (this.dirExists(destPath)) {\r\n            this.debug(`Destination directory ${destPath} already exists, removing`)\r\n            fs.rmSync(destPath, { recursive: true, force: true, maxRetries: 3, retryDelay: 1000 })\r\n        }\r\n\r\n        this.debug(`Copying ${sourceDir} to ${destPath}`)\r\n        fs.mkdirSync(destPath, { recursive: true })\r\n        fs.cpSync(sourceDir, destPath, { recursive: true, force: true })\r\n\r\n        this.debug(`Caching ${tool}@${version} (${arch}) from ${sourceDir}`)\r\n        return Promise.resolve(destPath)\r\n    }\r\n\r\n    findLocalTool(toolName: string, versionSpec: string, arch?: string): string | null {\r\n        arch = arch || os.arch()\r\n        if (!toolName) {\r\n            throw new Error('toolName is a required parameter')\r\n        }\r\n        if (!versionSpec) {\r\n            throw new Error('versionSpec is a required parameter')\r\n        }\r\n\r\n        const cacheRoot = this.cacheDir\r\n        if (!cacheRoot) {\r\n            this.debug('cache root not set')\r\n            return null\r\n        }\r\n\r\n        versionSpec = semver.clean(versionSpec) || versionSpec\r\n        this.info(`Looking for local tool ${toolName}@${versionSpec} (${arch})`)\r\n        const toolPath = path.join(cacheRoot, toolName, versionSpec, arch)\r\n        if (!this.dirExists(toolPath)) {\r\n            this.info(`Directory ${toolPath} not found`)\r\n            return null\r\n        } else {\r\n            this.info(`Found tool ${toolName}@${versionSpec} (${arch})`)\r\n        }\r\n\r\n        return toolPath\r\n    }\r\n}\r\n\r\nexport interface IExecResult {\r\n    stdout: string\r\n    stderr: string\r\n    code: number\r\n    error?: Error | null\r\n}\r\n\r\nexport async function getAgent(buildAgent: string | undefined): Promise<IBuildAgent> {\r\n    const agent = `../agents/${buildAgent}/buildAgent.js`\r\n    const module: { BuildAgent: new () => IBuildAgent } = await import(agent)\r\n    return new module.BuildAgent()\r\n}\r\n","import * as path from 'node:path'\r\nimport * as process from 'node:process'\r\nimport * as util from 'node:util'\r\nimport { exec as execNonPromise } from 'node:child_process'\r\n\r\nimport { lookPath } from './internal/lookPath'\r\nimport { BuildAgentBase, IBuildAgent, IExecResult } from '@agents/common'\r\n\r\nexport class BuildAgent extends BuildAgentBase implements IBuildAgent {\r\n    get agentName(): string {\r\n        return 'Local'\r\n    }\r\n\r\n    get sourceDir(): string {\r\n        return this.getVariableAsPath('AGENT_SOURCE_DIR')\r\n    }\r\n\r\n    get tempDir(): string {\r\n        return this.getVariableAsPath('AGENT_TEMP_DIR')\r\n    }\r\n\r\n    get cacheDir(): string {\r\n        return this.getVariableAsPath('AGENT_TOOLS_DIR')\r\n    }\r\n\r\n    addPath(toolPath: string): void {\r\n        const newPath = toolPath + path.delimiter + process.env['PATH']\r\n        this.debug(`new Path: ${newPath}`)\r\n        process.env['PATH'] = newPath\r\n        this.info(`Updated PATH: ${process.env['PATH']}`)\r\n    }\r\n\r\n    debug = (message: string): void => console.log(`[debug] ${message}`)\r\n\r\n    info = (message: string): void => console.log(`[info] - ${message}`)\r\n\r\n    warn = (message: string): void => console.warn(`[warn] - ${message}`)\r\n\r\n    error = (message: string): void => console.error(`[error] - ${message}`)\r\n\r\n    async exec(cmd: string, args: string[]): Promise<IExecResult> {\r\n        const exec = util.promisify(execNonPromise)\r\n\r\n        try {\r\n            const { stdout, stderr } = await exec(`${cmd} ${args.join(' ')}`)\r\n            return Promise.resolve({\r\n                code: 0,\r\n                error: null,\r\n                stderr,\r\n                stdout\r\n            })\r\n        } catch (e) {\r\n            const error = e as Error & { code: number; stderr: string; stdout: string }\r\n            return Promise.resolve({\r\n                code: error.code,\r\n                error,\r\n                stderr: error.stderr,\r\n                stdout: error.stdout\r\n            })\r\n        }\r\n    }\r\n\r\n    setFailed = (message: string, done?: boolean): void => this.error(`setFailed - ${message} - ${done}`)\r\n\r\n    setOutput = (name: string, value: string): void => this.debug(`setOutput - ${name} - ${value}`)\r\n\r\n    setSucceeded = (message: string, done?: boolean): void => this.info(`setSucceeded - ${message} - ${done}`)\r\n\r\n    setVariable(name: string, value: string): void {\r\n        this.debug(`setVariable - ${name} - ${value}`)\r\n        process.env[name] = value\r\n    }\r\n\r\n    async which(tool: string, _check?: boolean): Promise<string> {\r\n        this.debug(`looking for tool '${tool}' in PATH`)\r\n        let toolPath = await lookPath(tool)\r\n        if (toolPath) {\r\n            toolPath = path.resolve(toolPath)\r\n            this.debug(`found tool '${tool}' in PATH: ${toolPath}`)\r\n            return Promise.resolve(toolPath)\r\n        }\r\n        throw new Error(`Unable to locate executable file: ${tool}`)\r\n    }\r\n}\r\n"],"names":["process","path","fs","semver.clean","exec","execNonPromise"],"mappings":"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"}