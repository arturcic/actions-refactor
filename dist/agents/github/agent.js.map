{"version":3,"file":"agent.js","sources":["../../../src/agents/github/index.ts"],"sourcesContent":["import * as core from '@actions/core'\r\nimport * as exe from '@actions/exec'\r\nimport * as io from '@actions/io'\r\nimport * as toolCache from '@actions/tool-cache'\r\nimport fs from 'node:fs'\r\nimport type { IBuildAgent, IExecResult } from '@agents/common'\r\n\r\nexport class BuildAgent implements IBuildAgent {\r\n    get agentName(): string {\r\n        return 'GitHub Actions'\r\n    }\r\n\r\n    addPath(inputPath: string): void {\r\n        core.addPath(inputPath)\r\n    }\r\n\r\n    debug(message: string): void {\r\n        core.debug(message)\r\n    }\r\n\r\n    info(message: string): void {\r\n        core.info(message)\r\n    }\r\n\r\n    warn(message: string): void {\r\n        core.warning(message)\r\n    }\r\n\r\n    error(message: string): void {\r\n        core.error(message)\r\n    }\r\n\r\n    async exec(exec: string, args: string[]): Promise<IExecResult> {\r\n        const dotnetPath = await io.which(exec, true)\r\n        const { exitCode, stdout, stderr } = await exe.getExecOutput(`\"${dotnetPath}\"`, args)\r\n        return {\r\n            code: exitCode,\r\n            error: null,\r\n            stderr,\r\n            stdout\r\n        }\r\n    }\r\n\r\n    async cacheDir(sourceDir: string, tool: string, version: string, arch?: string): Promise<string> {\r\n        return toolCache.cacheDir(sourceDir, tool, version, arch)\r\n    }\r\n\r\n    dirExists(file: string): boolean {\r\n        return fs.existsSync(file) && fs.statSync(file).isDirectory()\r\n    }\r\n\r\n    fileExists(file: string): boolean {\r\n        return fs.existsSync(file) && fs.statSync(file).isFile()\r\n    }\r\n\r\n    findLocalTool(toolName: string, versionSpec: string, arch?: string): string | null {\r\n        return toolCache.find(toolName, versionSpec, arch)\r\n    }\r\n\r\n    getSourceDir(): string {\r\n        return this.getVariable('GITHUB_WORKSPACE')\r\n    }\r\n\r\n    getTempRootDir(): string {\r\n        return this.getVariable('RUNNER_TEMP')\r\n    }\r\n\r\n    getCacheRootDir(): string {\r\n        return this.getVariable('RUNNER_TOOL_CACHE')\r\n    }\r\n\r\n    getBooleanInput(input: string, required?: boolean): boolean {\r\n        const inputValue = this.getInput(input, required)\r\n        return (inputValue || 'false').toLowerCase() === 'true'\r\n    }\r\n\r\n    getInput(input: string, required?: boolean): string {\r\n        return core.getInput(input, { required } as core.InputOptions)?.trim()\r\n    }\r\n\r\n    getListInput(input: string, required?: boolean): string[] {\r\n        return this.getInput(input, required)\r\n            .split('\\n')\r\n            .filter(x => x !== '')\r\n    }\r\n\r\n    setFailed(message: string, _: boolean): void {\r\n        core.setFailed(message)\r\n    }\r\n\r\n    setOutput(name: string, value: string): void {\r\n        core.setOutput(name, value)\r\n    }\r\n\r\n    setSucceeded(_message: string, _done?: boolean): void {\r\n        //\r\n    }\r\n\r\n    getVariable(name: string): string {\r\n        return process.env[name] || ''\r\n    }\r\n\r\n    setVariable(name: string, value: string): void {\r\n        core.exportVariable(name, value)\r\n    }\r\n\r\n    async which(tool: string, check?: boolean): Promise<string> {\r\n        return io.which(tool, check)\r\n    }\r\n}\r\n"],"names":["core.addPath","core.debug","core.info","core.warning","core.error","io.which","exe.getExecOutput","toolCache.cacheDir","toolCache.find","core.getInput","core.setFailed","core.setOutput","core.exportVariable"],"mappings":"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"}