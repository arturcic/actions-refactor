{"version":3,"file":"build-agent.js","sources":["../../../src/agents/azure/build-agent.ts"],"sourcesContent":["import * as taskLib from 'azure-pipelines-task-lib/task'\r\n\r\nimport { BuildAgentBase, IBuildAgent, IExecResult } from '@agents/common'\r\n\r\nexport class BuildAgent extends BuildAgentBase implements IBuildAgent {\r\n    agentName = 'Azure Pipelines'\r\n\r\n    sourceDirVariable = 'BUILD_SOURCESDIRECTORY'\r\n    tempDirVariable = 'AGENT_TEMPDIRECTORY'\r\n    cacheDirVariable = 'AGENT_TOOLSDIRECTORY'\r\n\r\n    addPath(inputPath: string): void {\r\n        super.addPath(inputPath)\r\n        console.log(`##vso[task.prependpath]${inputPath}`)\r\n    }\r\n\r\n    debug = (message: string): void => taskLib.debug(message)\r\n\r\n    info = (message: string): void => taskLib.debug(message)\r\n\r\n    warn = (message: string): void => taskLib.warning(message)\r\n\r\n    error = (message: string): void => taskLib.error(message)\r\n\r\n    async exec(exec: string, args: string[]): Promise<IExecResult> {\r\n        const tr = taskLib.tool(exec)\r\n        tr.arg(args)\r\n\r\n        const result = tr.execSync()\r\n        return Promise.resolve({\r\n            code: result.code,\r\n            error: result.error,\r\n            stderr: result.stderr,\r\n            stdout: result.stdout\r\n        })\r\n    }\r\n\r\n    setFailed = (message: string, done?: boolean): void => taskLib.setResult(taskLib.TaskResult.Failed, message, done)\r\n\r\n    setOutput = (name: string, value: string): void => taskLib.setVariable(name, value, false, true)\r\n\r\n    setSucceeded = (message: string, done?: boolean): void => taskLib.setResult(taskLib.TaskResult.Succeeded, message, done)\r\n\r\n    setVariable = (name: string, value: string): void => taskLib.setVariable(name, value)\r\n\r\n    which = async (tool: string, check?: boolean): Promise<string> => Promise.resolve(taskLib.which(tool, check))\r\n}\r\n"],"names":["taskLib.debug","taskLib.warning","taskLib.error","taskLib.tool","taskLib.setResult","taskLib.TaskResult","taskLib.setVariable","taskLib.which"],"mappings":";;;AAIO,MAAM,mBAAmB,cAAsC,CAAA;AAAA,EAClE,SAAY,GAAA,iBAAA,CAAA;AAAA,EAEZ,iBAAoB,GAAA,wBAAA,CAAA;AAAA,EACpB,eAAkB,GAAA,qBAAA,CAAA;AAAA,EAClB,gBAAmB,GAAA,sBAAA,CAAA;AAAA,EAEnB,QAAQ,SAAyB,EAAA;AAC7B,IAAA,KAAA,CAAM,QAAQ,SAAS,CAAA,CAAA;AACvB,IAAQ,OAAA,CAAA,GAAA,CAAI,CAA0B,uBAAA,EAAA,SAAS,CAAE,CAAA,CAAA,CAAA;AAAA,GACrD;AAAA,EAEA,KAAQ,GAAA,CAAC,OAA0B,KAAAA,WAAc,OAAO,CAAA,CAAA;AAAA,EAExD,IAAO,GAAA,CAAC,OAA0B,KAAAA,WAAc,OAAO,CAAA,CAAA;AAAA,EAEvD,IAAO,GAAA,CAAC,OAA0B,KAAAC,aAAgB,OAAO,CAAA,CAAA;AAAA,EAEzD,KAAQ,GAAA,CAAC,OAA0B,KAAAC,WAAc,OAAO,CAAA,CAAA;AAAA,EAExD,MAAM,IAAK,CAAA,IAAA,EAAc,IAAsC,EAAA;AAC3D,IAAM,MAAA,EAAA,GAAKC,SAAQ,CAAK,IAAI,CAAA,CAAA;AAC5B,IAAA,EAAA,CAAG,IAAI,IAAI,CAAA,CAAA;AAEX,IAAM,MAAA,MAAA,GAAS,GAAG,QAAS,EAAA,CAAA;AAC3B,IAAA,OAAO,QAAQ,OAAQ,CAAA;AAAA,MACnB,MAAM,MAAO,CAAA,IAAA;AAAA,MACb,OAAO,MAAO,CAAA,KAAA;AAAA,MACd,QAAQ,MAAO,CAAA,MAAA;AAAA,MACf,QAAQ,MAAO,CAAA,MAAA;AAAA,KAClB,CAAA,CAAA;AAAA,GACL;AAAA,EAEA,SAAA,GAAY,CAAC,OAAA,EAAiB,IAAyB,KAAAC,eAAkBC,eAAQ,CAAW,MAAQ,EAAA,OAAA,EAAS,IAAI,CAAA,CAAA;AAAA,EAEjH,SAAA,GAAY,CAAC,IAAc,EAAA,KAAA,KAAwBC,gBAAoB,CAAA,IAAA,EAAM,KAAO,EAAA,KAAA,EAAO,IAAI,CAAA,CAAA;AAAA,EAE/F,YAAA,GAAe,CAAC,OAAA,EAAiB,IAAyB,KAAAF,eAAkBC,eAAQ,CAAW,SAAW,EAAA,OAAA,EAAS,IAAI,CAAA,CAAA;AAAA,EAEvH,cAAc,CAAC,IAAA,EAAc,UAAwBC,gBAAQ,CAAY,MAAM,KAAK,CAAA,CAAA;AAAA,EAEpF,KAAA,GAAQ,OAAO,IAAA,EAAc,KAAqC,KAAA,OAAA,CAAQ,QAAQC,UAAQ,CAAM,IAAM,EAAA,KAAK,CAAC,CAAA,CAAA;AAChH;;;;"}