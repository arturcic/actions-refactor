{"version":3,"file":"gitversion.js","sources":["../../src/tools/common/models.ts","../../src/tools/common/dotnet-tool.ts","../../src/tools/common/index.ts","../../src/tools/gitversion/models.ts","../../src/tools/common/settings.ts","../../src/tools/gitversion/settings.ts","../../src/tools/gitversion/tool.ts","../../src/tools/gitversion/main.ts"],"sourcesContent":["export enum SetupFields {\r\n    includePrerelease = 'includePrerelease',\r\n    versionSpec = 'versionSpec',\r\n    ignoreFailedSources = 'ignoreFailedSources',\r\n    preferLatestVersion = 'preferLatestVersion'\r\n}\r\n\r\nexport interface CliArgs {\r\n    command: string | undefined\r\n    buildAgent: string | undefined\r\n}\r\n\r\nexport interface ISetupSettings {\r\n    [SetupFields.versionSpec]: string\r\n    [SetupFields.includePrerelease]: boolean\r\n    [SetupFields.ignoreFailedSources]: boolean\r\n    [SetupFields.preferLatestVersion]: boolean\r\n}\r\n\r\nexport interface ISettingsProvider {\r\n    getSetupSettings(): ISetupSettings\r\n}\r\n","import { ISettingsProvider } from './models'\r\nimport os from 'node:os'\r\nimport fs from 'node:fs'\r\nimport path from 'node:path'\r\nimport crypto from 'node:crypto'\r\n\r\nimport * as semver from 'semver'\r\nimport { IBuildAgent, IExecResult } from '@agents/common'\r\n\r\nexport interface IDotnetTool {\r\n    get toolName(): string\r\n\r\n    disableTelemetry(): void\r\n\r\n    install(): Promise<string>\r\n}\r\n\r\nexport abstract class DotnetTool implements IDotnetTool {\r\n    private static readonly nugetRoot: string = 'https://azuresearch-usnc.nuget.org/'\r\n\r\n    constructor(protected buildAgent: IBuildAgent) {}\r\n\r\n    abstract get settingsProvider(): ISettingsProvider\r\n\r\n    abstract get toolName(): string\r\n\r\n    disableTelemetry(): void {\r\n        this.buildAgent.info('Disable Telemetry')\r\n        this.buildAgent.setVariable('DOTNET_CLI_TELEMETRY_OPTOUT', 'true')\r\n        this.buildAgent.setVariable('DOTNET_NOLOGO', 'true')\r\n    }\r\n\r\n    async execute(cmd: string, args: string[]): Promise<IExecResult> {\r\n        this.buildAgent.info(`Command: ${cmd} ${args.join(' ')}`)\r\n        return this.buildAgent.exec(cmd, args)\r\n    }\r\n\r\n    async install(): Promise<string> {\r\n        const dotnetExePath = await this.buildAgent.which('dotnet', true)\r\n        this.buildAgent.debug(`whichPath: ${dotnetExePath}`)\r\n        await this.setDotnetRoot()\r\n\r\n        const setupSettings = this.settingsProvider.getSetupSettings()\r\n\r\n        let version: string | null = semver.clean(setupSettings.versionSpec) || setupSettings.versionSpec\r\n        this.buildAgent.info('--------------------------')\r\n        this.buildAgent.info(`Acquiring ${this.toolName} for version spec: ${version}`)\r\n        this.buildAgent.info('--------------------------')\r\n\r\n        if (!this.isExplicitVersion(version)) {\r\n            version = await this.queryLatestMatch(this.toolName, version, setupSettings.includePrerelease)\r\n            if (!version) {\r\n                throw new Error(`Unable to find ${this.toolName} version '${version}'.`)\r\n            }\r\n        }\r\n\r\n        let toolPath: string | null = null\r\n        if (!setupSettings.preferLatestVersion) {\r\n            // Let's try and resolve the version spec locally first\r\n            toolPath = this.buildAgent.findLocalTool(this.toolName, version)\r\n        }\r\n        if (!toolPath) {\r\n            // Download, extract, cache\r\n            toolPath = await this.installTool(this.toolName, version, setupSettings.ignoreFailedSources)\r\n        }\r\n\r\n        this.buildAgent.info('--------------------------')\r\n        this.buildAgent.info(`${this.toolName} version: ${version} installed.`)\r\n        this.buildAgent.info('--------------------------')\r\n\r\n        // Prepend the tool's path. This prepends the PATH for the current process and\r\n        // instructs the agent to prepend for each task that follows.\r\n        this.buildAgent.info(`Prepending ${toolPath} to PATH`)\r\n        this.buildAgent.debug(`toolPath: ${toolPath}`)\r\n\r\n        this.buildAgent.addPath(toolPath)\r\n\r\n        return toolPath\r\n    }\r\n\r\n    protected async setDotnetRoot(): Promise<void> {\r\n        if (os.platform() !== 'win32' && !this.buildAgent.getVariable('DOTNET_ROOT')) {\r\n            let dotnetPath = await this.buildAgent.which('dotnet', true)\r\n            dotnetPath = fs.readlinkSync(dotnetPath) || dotnetPath\r\n            const dotnetRoot = path.dirname(dotnetPath)\r\n            this.buildAgent.setVariable('DOTNET_ROOT', dotnetRoot)\r\n        }\r\n    }\r\n\r\n    protected isValidInputFile(input: string, file: string): boolean {\r\n        return this.filePathSupplied(input) && this.buildAgent.fileExists(file)\r\n    }\r\n\r\n    protected filePathSupplied(file: string): boolean {\r\n        const pathValue = path.resolve(this.buildAgent.getInput(file) || '')\r\n        const repoRoot = this.buildAgent.getSourceDir()\r\n        return pathValue !== repoRoot\r\n    }\r\n\r\n    private async queryLatestMatch(toolName: string, versionSpec: string, includePrerelease: boolean): Promise<string | null> {\r\n        this.buildAgent.info(\r\n            `Querying tool versions for ${toolName}${versionSpec ? `@${versionSpec}` : ''} ${includePrerelease ? 'including pre-releases' : ''}`\r\n        )\r\n\r\n        const toolNameParam = encodeURIComponent(toolName.toLowerCase())\r\n        const prereleaseParam = includePrerelease ? 'true' : 'false'\r\n        const downloadPath = `${DotnetTool.nugetRoot}query?q=${toolNameParam}&prerelease=${prereleaseParam}&semVerLevel=2.0.0&take=1`\r\n\r\n        const response = await fetch(downloadPath)\r\n\r\n        if (!response || !response.ok) {\r\n            this.buildAgent.warn(`failed to query latest version for ${toolName} from ${downloadPath}. Status code: ${response ? response.status : 'unknown'}`)\r\n            return null\r\n        }\r\n\r\n        const { data }: { data: { versions: { version: string }[] }[] } = await response.json()\r\n\r\n        const versions = data[0].versions.map(x => x.version)\r\n        if (!versions || !versions.length) {\r\n            return null\r\n        }\r\n\r\n        this.buildAgent.debug(`got versions: ${versions.join(', ')}`)\r\n\r\n        const version = semver.maxSatisfying(versions, versionSpec, { includePrerelease })\r\n        if (version) {\r\n            this.buildAgent.info(`Found matching version: ${version}`)\r\n        } else {\r\n            this.buildAgent.info('match not found')\r\n        }\r\n\r\n        return version\r\n    }\r\n\r\n    private async installTool(toolName: string, version: string, ignoreFailedSources: boolean): Promise<string> {\r\n        const semverVersion = semver.clean(version)\r\n        if (!semverVersion) {\r\n            throw new Error(`Invalid version spec: ${version}`)\r\n        }\r\n\r\n        const tempDirectory = await this.createTempDir()\r\n\r\n        if (!tempDirectory) {\r\n            throw new Error('Unable to create temp directory')\r\n        }\r\n\r\n        const args = ['tool', 'install', toolName, '--tool-path', tempDirectory, '--version', semverVersion]\r\n        if (ignoreFailedSources) {\r\n            args.push('--ignore-failed-sources')\r\n        }\r\n\r\n        const result = await this.execute('dotnet', args)\r\n        const status = result.code === 0 ? 'success' : 'failure'\r\n        const message = result.code === 0 ? result.stdout : result.stderr\r\n\r\n        this.buildAgent.debug(`Tool install result: ${status} ${message}`)\r\n        if (result.code !== 0) {\r\n            throw new Error(message)\r\n        }\r\n        this.buildAgent.info(message)\r\n\r\n        return await this.buildAgent.cacheDir(tempDirectory, toolName, semverVersion)\r\n    }\r\n\r\n    async createTempDir(): Promise<string> {\r\n        const tempRootDir = this.buildAgent.getTempRootDir()\r\n        if (!tempRootDir) {\r\n            throw new Error('Temp directory not set')\r\n        }\r\n\r\n        const uuid = crypto.randomUUID()\r\n        const tempPath = path.join(tempRootDir, uuid)\r\n        this.buildAgent.debug(`Creating temp directory ${tempPath}`)\r\n        fs.mkdirSync(tempPath)\r\n        return Promise.resolve(tempPath)\r\n    }\r\n\r\n    private isExplicitVersion(versionSpec: string): boolean {\r\n        const cleanedVersionSpec = semver.clean(versionSpec)\r\n        const valid = semver.valid(cleanedVersionSpec) != null\r\n        this.buildAgent.debug(`Is version explicit? ${valid}`)\r\n\r\n        return valid\r\n    }\r\n}\r\n","import { parseArgs } from 'util'\r\nimport { CliArgs } from './models'\r\n\r\nexport * from './models'\r\nexport * from './dotnet-tool'\r\n\r\n//import { randomUUID } from 'node:crypto';\r\n//import * as semver from 'semver';\r\n\r\nexport function parseCliArgs(): CliArgs {\r\n    return parseArgs({\r\n        options: {\r\n            command: { type: 'string', short: 'c' },\r\n            buildAgent: { type: 'string', short: 'a' }\r\n        }\r\n    }).values as CliArgs\r\n}\r\n\r\n/*\r\nexport function isExplicitVersion(versionSpec: string): boolean {\r\n    let uuid = randomUUID();\r\n    console.log(uuid);\r\n\r\n    const c = semver.clean(versionSpec);\r\n    console.log('isExplicit: ' + c);\r\n\r\n    const valid = semver.valid(c) != null;\r\n    console.log('explicit? ' + valid);\r\n\r\n    return valid;\r\n}*/\r\n","export enum ExecuteFields {\r\n    targetPath = 'targetPath',\r\n    useConfigFile = 'useConfigFile',\r\n    configFilePath = 'configFilePath',\r\n    updateAssemblyInfo = 'updateAssemblyInfo',\r\n    updateAssemblyInfoFilename = 'updateAssemblyInfoFilename',\r\n    additionalArguments = 'additionalArguments',\r\n    srcDir = 'srcDir'\r\n}\r\n\r\nexport interface GitVersionSettings {\r\n    [ExecuteFields.targetPath]: string\r\n    [ExecuteFields.useConfigFile]: boolean\r\n    [ExecuteFields.configFilePath]: string\r\n    [ExecuteFields.updateAssemblyInfo]: boolean\r\n    [ExecuteFields.updateAssemblyInfoFilename]: string\r\n    [ExecuteFields.additionalArguments]: string\r\n    [ExecuteFields.srcDir]: string | undefined\r\n}\r\n\r\nexport interface GitVersionOutput {\r\n    Major: number\r\n    Minor: number\r\n    Patch: number\r\n    PreReleaseTag: string\r\n    PreReleaseTagWithDash: string\r\n    PreReleaseLabel: string\r\n    PreReleaseNumber: number\r\n    WeightedPreReleaseNumber: number\r\n    BuildMetaData: number\r\n    BuildMetaDataPadded: string\r\n    FullBuildMetaData: string\r\n    MajorMinorPatch: string\r\n    SemVer: string\r\n    LegacySemVer: string\r\n    LegacySemVerPadded: string\r\n    AssemblySemVer: string\r\n    AssemblySemFileVer: string\r\n    FullSemVer: string\r\n    InformationalVersion: string\r\n    BranchName: string\r\n    EscapedBranchName: string\r\n    Sha: string\r\n    ShortSha: string\r\n    NuGetVersionV2: string\r\n    NuGetVersion: string\r\n    NuGetPreReleaseTagV2: string\r\n    NuGetPreReleaseTag: string\r\n    VersionSourceSha: string\r\n    CommitsSinceVersionSource: number\r\n    CommitsSinceVersionSourcePadded: string\r\n    UncommittedChanges: number\r\n    CommitDate: string\r\n}\r\n","import { ISettingsProvider, ISetupSettings, SetupFields } from './models'\r\nimport { IBuildAgent } from '@agents/common'\r\n\r\nexport class SettingsProvider implements ISettingsProvider {\r\n    constructor(protected buildAgent: IBuildAgent) {}\r\n\r\n    getSetupSettings(): ISetupSettings {\r\n        const versionSpec = this.buildAgent.getInput(SetupFields.versionSpec)\r\n        const includePrerelease = this.buildAgent.getBooleanInput(SetupFields.includePrerelease)\r\n        const ignoreFailedSources = this.buildAgent.getBooleanInput(SetupFields.ignoreFailedSources)\r\n        const preferLatestVersion = this.buildAgent.getBooleanInput(SetupFields.preferLatestVersion)\r\n\r\n        return {\r\n            versionSpec,\r\n            includePrerelease,\r\n            ignoreFailedSources,\r\n            preferLatestVersion\r\n        }\r\n    }\r\n}\r\n","import { ISettingsProvider } from '@tools/common'\r\nimport { ExecuteFields, GitVersionSettings } from './models'\r\nimport { SettingsProvider } from '../common/settings'\r\n\r\nexport interface IGitVersionSettingsProvider extends ISettingsProvider {\r\n    getGitVersionSettings(): GitVersionSettings\r\n}\r\n\r\nexport class GitVersionSettingsProvider extends SettingsProvider implements IGitVersionSettingsProvider {\r\n    getGitVersionSettings(): GitVersionSettings {\r\n        const targetPath = this.buildAgent.getInput(ExecuteFields.targetPath)\r\n\r\n        const useConfigFile = this.buildAgent.getBooleanInput(ExecuteFields.useConfigFile)\r\n        const configFilePath = this.buildAgent.getInput(ExecuteFields.configFilePath)\r\n\r\n        const updateAssemblyInfo = this.buildAgent.getBooleanInput(ExecuteFields.updateAssemblyInfo)\r\n        const updateAssemblyInfoFilename = this.buildAgent.getInput(ExecuteFields.updateAssemblyInfoFilename)\r\n\r\n        const additionalArguments = this.buildAgent.getInput(ExecuteFields.additionalArguments)\r\n\r\n        const srcDir = this.buildAgent.getSourceDir()?.replace(/\\\\/g, '/')\r\n\r\n        return {\r\n            targetPath,\r\n            useConfigFile,\r\n            configFilePath,\r\n            updateAssemblyInfo,\r\n            updateAssemblyInfoFilename,\r\n            additionalArguments,\r\n            srcDir\r\n        }\r\n    }\r\n}\r\n","import { DotnetTool } from '@tools/common'\r\nimport { GitVersionSettingsProvider, IGitVersionSettingsProvider } from './settings'\r\nimport { GitVersionOutput, GitVersionSettings } from './models'\r\nimport { IExecResult } from '@agents/common'\r\n\r\nexport class GitVersionTool extends DotnetTool {\r\n    get toolName(): string {\r\n        return 'GitVersion.Tool'\r\n    }\r\n\r\n    get settingsProvider(): IGitVersionSettingsProvider {\r\n        return new GitVersionSettingsProvider(this.buildAgent)\r\n    }\r\n\r\n    async run(): Promise<IExecResult> {\r\n        const settings = this.settingsProvider.getGitVersionSettings()\r\n        const workDir = this.getRepoDir(settings.targetPath)\r\n        const args = this.getArguments(workDir, settings)\r\n\r\n        await this.setDotnetRoot()\r\n\r\n        const toolPath = await this.buildAgent.which('dotnet-gitversion', true)\r\n        return this.execute(toolPath, args)\r\n    }\r\n\r\n    writeGitVersionToAgent(output: GitVersionOutput): void {\r\n        const keysFn = Object.keys as <T extends object>(obj: T) => (keyof T)[]\r\n        const keys = keysFn<GitVersionOutput>(output)\r\n        for (const property of keys) {\r\n            const name = this.toCamelCase(property)\r\n            try {\r\n                const value = output[property]?.toString()\r\n                this.buildAgent.setOutput(name, value)\r\n                this.buildAgent.setOutput(`GitVersion_${name}`, value)\r\n                this.buildAgent.setVariable(name, value)\r\n                this.buildAgent.setVariable(`GitVersion_${name}`, value)\r\n            } catch (error) {\r\n                this.buildAgent.error(`Unable to set output/variable for ${name}`)\r\n            }\r\n        }\r\n    }\r\n\r\n    private getRepoDir(targetPath: string): string {\r\n        let workDir: string\r\n        const srcDir = this.buildAgent.getSourceDir() || '.'\r\n        if (!targetPath) {\r\n            workDir = srcDir\r\n        } else {\r\n            if (this.buildAgent.dirExists(targetPath)) {\r\n                workDir = targetPath\r\n            } else {\r\n                throw new Error(`Directory not found at ${targetPath}`)\r\n            }\r\n        }\r\n        return workDir.replace(/\\\\/g, '/')\r\n    }\r\n\r\n    private getArguments(workDir: string, options: GitVersionSettings): string[] {\r\n        let args = [workDir, '/output', 'json', '/output', 'buildserver']\r\n\r\n        const { useConfigFile, configFilePath, updateAssemblyInfo, updateAssemblyInfoFilename, additionalArguments } = options\r\n\r\n        if (useConfigFile) {\r\n            if (this.isValidInputFile('configFilePath', configFilePath)) {\r\n                args.push('/config', configFilePath)\r\n            } else {\r\n                throw new Error(`GitVersion configuration file not found at ${configFilePath}`)\r\n            }\r\n        }\r\n        if (updateAssemblyInfo) {\r\n            args.push('/updateassemblyinfo')\r\n\r\n            // You can specify 'updateAssemblyInfo' without 'updateAssemblyInfoFilename'.\r\n            if (updateAssemblyInfoFilename?.length > 0) {\r\n                if (this.isValidInputFile('updateAssemblyInfoFilename', updateAssemblyInfoFilename)) {\r\n                    args.push(updateAssemblyInfoFilename)\r\n                } else {\r\n                    throw new Error(`AssemblyInfoFilename file not found at ${updateAssemblyInfoFilename}`)\r\n                }\r\n            }\r\n        }\r\n\r\n        if (additionalArguments) {\r\n            args = args.concat(this.argStringToArray(additionalArguments))\r\n        }\r\n        return args\r\n    }\r\n\r\n    private argStringToArray(argString: string): string[] {\r\n        const args: string[] = []\r\n\r\n        let inQuotes = false\r\n        let escaped = false\r\n        let lastCharWasSpace = true\r\n        let arg = ''\r\n\r\n        const append = (c: string): void => {\r\n            // we only escape double quotes.\r\n            if (escaped && c !== '\"') {\r\n                arg += '\\\\'\r\n            }\r\n\r\n            arg += c\r\n            escaped = false\r\n        }\r\n\r\n        for (let i = 0; i < argString.length; i++) {\r\n            const c = argString.charAt(i)\r\n\r\n            if (c === ' ' && !inQuotes) {\r\n                if (!lastCharWasSpace) {\r\n                    args.push(arg)\r\n                    arg = ''\r\n                }\r\n                lastCharWasSpace = true\r\n                continue\r\n            } else {\r\n                lastCharWasSpace = false\r\n            }\r\n\r\n            if (c === '\"') {\r\n                if (!escaped) {\r\n                    inQuotes = !inQuotes\r\n                } else {\r\n                    append(c)\r\n                }\r\n                continue\r\n            }\r\n\r\n            if (c === '\\\\' && escaped) {\r\n                append(c)\r\n                continue\r\n            }\r\n\r\n            if (c === '\\\\' && inQuotes) {\r\n                escaped = true\r\n                continue\r\n            }\r\n\r\n            append(c)\r\n            lastCharWasSpace = false\r\n        }\r\n\r\n        if (!lastCharWasSpace) {\r\n            args.push(arg.trim())\r\n        }\r\n\r\n        return args\r\n    }\r\n\r\n    private toCamelCase(input: string): string {\r\n        return input.replace(/^\\w|[A-Z]|\\b\\w|\\s+/g, function (match, index) {\r\n            if (+match === 0) return '' // or if (/\\s+/.test(match)) for white spaces\r\n            return index === 0 ? match.toLowerCase() : match.toUpperCase()\r\n        })\r\n    }\r\n}\r\n","import { parseCliArgs } from '@tools/common'\r\nimport { IBuildAgent } from '@agents/common'\r\nimport { GitVersionTool } from './tool'\r\n\r\nconst { command, buildAgent } = parseCliArgs()\r\n\r\nconst agent = await getAgent(buildAgent)\r\nconst gitVersionTool = new GitVersionTool(agent)\r\n\r\nswitch (command) {\r\n    case 'setup':\r\n        await setup()\r\n        break\r\n    case 'execute':\r\n        await run()\r\n        break\r\n}\r\n\r\nasync function getAgent(buildAgent: string | undefined): Promise<IBuildAgent> {\r\n    const agent = `../agents/${buildAgent}/agent.js`\r\n    const module: { BuildAgent: new () => IBuildAgent } = await import(agent)\r\n    return new module.BuildAgent()\r\n}\r\n\r\nasync function setup(): Promise<void> {\r\n    try {\r\n        agent.info(`Running on: '${agent.agentName}'`)\r\n        agent.debug('Disabling telemetry')\r\n        gitVersionTool.disableTelemetry()\r\n\r\n        agent.debug('Installing GitVersion')\r\n        await gitVersionTool.install()\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nasync function run(): Promise<void> {\r\n    try {\r\n        agent.debug(`Agent: '${agent.agentName}'`)\r\n        agent.debug('Disabling telemetry')\r\n        gitVersionTool.disableTelemetry()\r\n\r\n        agent.debug('Executing GitVersion')\r\n        const result = await gitVersionTool.run()\r\n\r\n        if (result.code === 0) {\r\n            agent.debug('GitVersion executed successfully')\r\n            const { stdout } = result\r\n\r\n            if (stdout.lastIndexOf('{') === -1 || stdout.lastIndexOf('}') === -1) {\r\n                agent.debug('GitVersion output is not valid JSON')\r\n                agent.setFailed('GitVersion output is not valid JSON', true)\r\n                return\r\n            } else {\r\n                const jsonOutput = stdout.substring(stdout.lastIndexOf('{'), stdout.lastIndexOf('}') + 1)\r\n\r\n                const gitVersionOutput = JSON.parse(jsonOutput)\r\n                gitVersionTool.writeGitVersionToAgent(gitVersionOutput)\r\n                agent.setSucceeded('GitVersion executed successfully', true)\r\n            }\r\n        } else {\r\n            agent.debug('GitVersion failed')\r\n            const error = result.error\r\n            if (error instanceof Error) {\r\n                agent.setFailed(error?.message, true)\r\n            }\r\n        }\r\n    } catch (error) {\r\n        if (error instanceof Error) {\r\n            agent.setFailed(error?.message, true)\r\n        }\r\n    }\r\n}\r\n"],"names":["SetupFields","semver.clean","semver.maxSatisfying","semver.valid","ExecuteFields","buildAgent","agent"],"mappings":"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"}