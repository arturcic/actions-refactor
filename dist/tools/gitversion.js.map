{"version":3,"file":"gitversion.js","sources":["../../src/tools/gitversion/models.ts","../../src/tools/gitversion/settings.ts","../../src/tools/gitversion/tool.ts","../../src/tools/gitversion/main.ts"],"sourcesContent":["export enum ExecuteFields {\r\n    targetPath = 'targetPath',\r\n    useConfigFile = 'useConfigFile',\r\n    configFilePath = 'configFilePath',\r\n    updateAssemblyInfo = 'updateAssemblyInfo',\r\n    updateAssemblyInfoFilename = 'updateAssemblyInfoFilename',\r\n    additionalArguments = 'additionalArguments',\r\n    srcDir = 'srcDir'\r\n}\r\n\r\nexport interface GitVersionSettings {\r\n    [ExecuteFields.targetPath]: string\r\n    [ExecuteFields.useConfigFile]: boolean\r\n    [ExecuteFields.configFilePath]: string\r\n    [ExecuteFields.updateAssemblyInfo]: boolean\r\n    [ExecuteFields.updateAssemblyInfoFilename]: string\r\n    [ExecuteFields.additionalArguments]: string\r\n    [ExecuteFields.srcDir]: string | undefined\r\n}\r\n\r\nexport interface GitVersionOutput {\r\n    Major: number\r\n    Minor: number\r\n    Patch: number\r\n    PreReleaseTag: string\r\n    PreReleaseTagWithDash: string\r\n    PreReleaseLabel: string\r\n    PreReleaseNumber: number\r\n    WeightedPreReleaseNumber: number\r\n    BuildMetaData: number\r\n    BuildMetaDataPadded: string\r\n    FullBuildMetaData: string\r\n    MajorMinorPatch: string\r\n    SemVer: string\r\n    LegacySemVer: string\r\n    LegacySemVerPadded: string\r\n    AssemblySemVer: string\r\n    AssemblySemFileVer: string\r\n    FullSemVer: string\r\n    InformationalVersion: string\r\n    BranchName: string\r\n    EscapedBranchName: string\r\n    Sha: string\r\n    ShortSha: string\r\n    NuGetVersionV2: string\r\n    NuGetVersion: string\r\n    NuGetPreReleaseTagV2: string\r\n    NuGetPreReleaseTag: string\r\n    VersionSourceSha: string\r\n    CommitsSinceVersionSource: number\r\n    CommitsSinceVersionSourcePadded: string\r\n    UncommittedChanges: number\r\n    CommitDate: string\r\n}\r\n","import { ISettingsProvider } from '@tools/common'\r\nimport { ExecuteFields, GitVersionSettings } from './models'\r\nimport { SettingsProvider } from '../common/settings'\r\n\r\nexport interface IGitVersionSettingsProvider extends ISettingsProvider {\r\n    getGitVersionSettings(): GitVersionSettings\r\n}\r\n\r\nexport class GitVersionSettingsProvider extends SettingsProvider implements IGitVersionSettingsProvider {\r\n    getGitVersionSettings(): GitVersionSettings {\r\n        const targetPath = this.buildAgent.getInput(ExecuteFields.targetPath)\r\n\r\n        const useConfigFile = this.buildAgent.getBooleanInput(ExecuteFields.useConfigFile)\r\n        const configFilePath = this.buildAgent.getInput(ExecuteFields.configFilePath)\r\n\r\n        const updateAssemblyInfo = this.buildAgent.getBooleanInput(ExecuteFields.updateAssemblyInfo)\r\n        const updateAssemblyInfoFilename = this.buildAgent.getInput(ExecuteFields.updateAssemblyInfoFilename)\r\n\r\n        const additionalArguments = this.buildAgent.getInput(ExecuteFields.additionalArguments)\r\n\r\n        const srcDir = this.buildAgent.sourceDir?.replace(/\\\\/g, '/')\r\n\r\n        return {\r\n            targetPath,\r\n            useConfigFile,\r\n            configFilePath,\r\n            updateAssemblyInfo,\r\n            updateAssemblyInfoFilename,\r\n            additionalArguments,\r\n            srcDir\r\n        }\r\n    }\r\n}\r\n","import { DotnetTool } from '@tools/common'\r\nimport { GitVersionSettingsProvider, IGitVersionSettingsProvider } from './settings'\r\nimport { GitVersionOutput, GitVersionSettings } from './models'\r\nimport { IExecResult } from '@agents/common'\r\n\r\nexport class GitVersionTool extends DotnetTool {\r\n    get toolName(): string {\r\n        return 'GitVersion.Tool'\r\n    }\r\n\r\n    get settingsProvider(): IGitVersionSettingsProvider {\r\n        return new GitVersionSettingsProvider(this.buildAgent)\r\n    }\r\n\r\n    async run(): Promise<IExecResult> {\r\n        const settings = this.settingsProvider.getGitVersionSettings()\r\n        const workDir = this.getRepoDir(settings.targetPath)\r\n        const args = this.getArguments(workDir, settings)\r\n\r\n        await this.setDotnetRoot()\r\n\r\n        const toolPath = await this.buildAgent.which('dotnet-gitversion', true)\r\n        return this.execute(toolPath, args)\r\n    }\r\n\r\n    writeGitVersionToAgent(output: GitVersionOutput): void {\r\n        const keysFn = Object.keys as <T extends object>(obj: T) => (keyof T)[]\r\n        const keys = keysFn<GitVersionOutput>(output)\r\n        for (const property of keys) {\r\n            const name = this.toCamelCase(property)\r\n            try {\r\n                const value = output[property]?.toString()\r\n                this.buildAgent.setOutput(name, value)\r\n                this.buildAgent.setOutput(`GitVersion_${property}`, value)\r\n                this.buildAgent.setVariable(name, value)\r\n                this.buildAgent.setVariable(`GitVersion_${property}`, value)\r\n            } catch (error) {\r\n                this.buildAgent.error(`Unable to set output/variable for ${property}`)\r\n            }\r\n        }\r\n    }\r\n\r\n    private getRepoDir(targetPath: string): string {\r\n        let workDir: string\r\n        if (!targetPath) {\r\n            workDir = this.buildAgent.sourceDir || '.'\r\n        } else {\r\n            if (this.buildAgent.dirExists(targetPath)) {\r\n                workDir = targetPath\r\n            } else {\r\n                throw new Error(`Directory not found at ${targetPath}`)\r\n            }\r\n        }\r\n        return workDir.replace(/\\\\/g, '/')\r\n    }\r\n\r\n    private getArguments(workDir: string, options: GitVersionSettings): string[] {\r\n        let args = [workDir, '/output', 'json', '/output', 'buildserver']\r\n\r\n        const { useConfigFile, configFilePath, updateAssemblyInfo, updateAssemblyInfoFilename, additionalArguments } = options\r\n\r\n        if (useConfigFile) {\r\n            if (this.isValidInputFile('configFilePath', configFilePath)) {\r\n                args.push('/config', configFilePath)\r\n            } else {\r\n                throw new Error(`GitVersion configuration file not found at ${configFilePath}`)\r\n            }\r\n        }\r\n        if (updateAssemblyInfo) {\r\n            args.push('/updateassemblyinfo')\r\n\r\n            // You can specify 'updateAssemblyInfo' without 'updateAssemblyInfoFilename'.\r\n            if (updateAssemblyInfoFilename?.length > 0) {\r\n                if (this.isValidInputFile('updateAssemblyInfoFilename', updateAssemblyInfoFilename)) {\r\n                    args.push(updateAssemblyInfoFilename)\r\n                } else {\r\n                    throw new Error(`AssemblyInfoFilename file not found at ${updateAssemblyInfoFilename}`)\r\n                }\r\n            }\r\n        }\r\n\r\n        if (additionalArguments) {\r\n            args = args.concat(this.argStringToArray(additionalArguments))\r\n        }\r\n        return args\r\n    }\r\n\r\n    private argStringToArray(argString: string): string[] {\r\n        const args: string[] = []\r\n\r\n        let inQuotes = false\r\n        let escaped = false\r\n        let lastCharWasSpace = true\r\n        let arg = ''\r\n\r\n        const append = (c: string): void => {\r\n            // we only escape double quotes.\r\n            if (escaped && c !== '\"') {\r\n                arg += '\\\\'\r\n            }\r\n\r\n            arg += c\r\n            escaped = false\r\n        }\r\n\r\n        for (let i = 0; i < argString.length; i++) {\r\n            const c = argString.charAt(i)\r\n\r\n            if (c === ' ' && !inQuotes) {\r\n                if (!lastCharWasSpace) {\r\n                    args.push(arg)\r\n                    arg = ''\r\n                }\r\n                lastCharWasSpace = true\r\n                continue\r\n            } else {\r\n                lastCharWasSpace = false\r\n            }\r\n\r\n            if (c === '\"') {\r\n                if (!escaped) {\r\n                    inQuotes = !inQuotes\r\n                } else {\r\n                    append(c)\r\n                }\r\n                continue\r\n            }\r\n\r\n            if (c === '\\\\' && escaped) {\r\n                append(c)\r\n                continue\r\n            }\r\n\r\n            if (c === '\\\\' && inQuotes) {\r\n                escaped = true\r\n                continue\r\n            }\r\n\r\n            append(c)\r\n            lastCharWasSpace = false\r\n        }\r\n\r\n        if (!lastCharWasSpace) {\r\n            args.push(arg.trim())\r\n        }\r\n\r\n        return args\r\n    }\r\n\r\n    private toCamelCase(input: string): string {\r\n        return input.replace(/^\\w|[A-Z]|\\b\\w|\\s+/g, function (match, index) {\r\n            if (+match === 0) return '' // or if (/\\s+/.test(match)) for white spaces\r\n            return index === 0 ? match.toLowerCase() : match.toUpperCase()\r\n        })\r\n    }\r\n}\r\n","import { parseCliArgs } from '@tools/common'\r\nimport { getAgent } from '@agents/common'\r\nimport { GitVersionTool } from './tool'\r\n\r\nconst { command, buildAgent } = parseCliArgs()\r\n\r\nconst agent = await getAgent(buildAgent)\r\nconst gitVersionTool = new GitVersionTool(agent)\r\n\r\nswitch (command) {\r\n    case 'setup':\r\n        await setup()\r\n        break\r\n    case 'execute':\r\n        await run()\r\n        break\r\n}\r\n\r\nasync function setup(): Promise<void> {\r\n    try {\r\n        agent.info(`Running on: '${agent.agentName}'`)\r\n        agent.debug('Disabling telemetry')\r\n        gitVersionTool.disableTelemetry()\r\n\r\n        agent.debug('Installing GitVersion')\r\n        await gitVersionTool.install()\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nasync function run(): Promise<void> {\r\n    try {\r\n        agent.debug(`Agent: '${agent.agentName}'`)\r\n        agent.debug('Disabling telemetry')\r\n        gitVersionTool.disableTelemetry()\r\n\r\n        agent.debug('Executing GitVersion')\r\n        const result = await gitVersionTool.run()\r\n\r\n        if (result.code === 0) {\r\n            agent.debug('GitVersion executed successfully')\r\n            const { stdout } = result\r\n\r\n            if (stdout.lastIndexOf('{') === -1 || stdout.lastIndexOf('}') === -1) {\r\n                agent.debug('GitVersion output is not valid JSON')\r\n                agent.setFailed('GitVersion output is not valid JSON', true)\r\n                return\r\n            } else {\r\n                const jsonOutput = stdout.substring(stdout.lastIndexOf('{'), stdout.lastIndexOf('}') + 1)\r\n\r\n                const gitVersionOutput = JSON.parse(jsonOutput)\r\n                gitVersionTool.writeGitVersionToAgent(gitVersionOutput)\r\n                agent.setSucceeded('GitVersion executed successfully', true)\r\n            }\r\n        } else {\r\n            agent.debug('GitVersion failed')\r\n            const error = result.error\r\n            if (error instanceof Error) {\r\n                agent.setFailed(error?.message, true)\r\n            }\r\n        }\r\n    } catch (error) {\r\n        if (error instanceof Error) {\r\n            agent.setFailed(error?.message, true)\r\n        }\r\n    }\r\n}\r\n"],"names":["ExecuteFields"],"mappings":"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"}